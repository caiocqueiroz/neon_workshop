name: Build and Test with Copilot CLI

on:
  workflow_dispatch:
  push:
    branches: [ main, demo-caioqueiroz ]
  pull_request:
    branches: [ main ]

jobs:
  copilot-cli-build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest-cov pytest-django isort black

      - name: Run Django migrations
        env:
          DJANGO_SETTINGS_MODULE: school_app.settings
        run: |
          python manage.py migrate

      - name: Check code quality with isort
        run: |
          isort --check-only --diff apps/

      - name: Check code quality with black
        run: |
          black --check --diff apps/

      - name: Run Django tests with coverage
        env:
          DJANGO_SETTINGS_MODULE: school_app.settings
        run: |
          coverage run --source="apps" manage.py test
          coverage xml
          coverage html
          coverage report

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install GitHub Copilot CLI 
        run: |
          npm install -g @github/copilot

      - name: Run Copilot CLI 
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_TOKEN }}
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "Testing Copilot CLI..."

          # User Copilot CLI
          copilot -p "Execute o arquivo de prompt testcoveragent.prompt.md" --allow-all-tools